import pandas as pd
import networkx as nx
import json
from networkx.readwrite import json_graph

def build_company_hierarchy(company_reg, max_levels):
    # Load the company and director datasets into dataframes
    # Replace the placeholders 'data_entities' and 'result2' with the actual dataframes
    company_df = data_entities
    director_df = result2

    # Create a directed graph using NetworkX
    G = nx.DiGraph()
    # Add the root company node
    root_company = company_df.loc[company_df['enterpriseregistrationnumber'] == company_reg]
    if len(root_company) == 0:
	raise ValueError(\"Root company not found for the given registration number.\")
    root_company_name = root_company.iloc[0]['enterprisename']
    G.add_node(company_reg, name=root_company_name, level=0)

    # Find directors linked to the root company
    linked_directors = director_df.loc[director_df['enterpriseregistrationnumber'] == company_reg]

    # Create a set to store visited companies and directors
    visited = set()

    # Iterate over linked directors and add them to the graph
    for _, director_row in linked_directors.iterrows():
	director_name = director_row['full_names']
	G.add_node(director_name, level=1)
	G.add_edge(company_reg, director_name)

	# Recursively explore linked companies and their directors
	explore_linked_companies(G, director_row['enterpriseregistrationnumber'], director_name, company_df, director_df, max_levels, level=2, visited=visited)

    return G
	def explore_linked_companies(G, company_reg, director_name, company_df, director_df, max_levels, level, visited):
    if level > max_levels:
	return

    visited.add((company_reg, director_name))

    # Find companies associated with the given company registration
    linked_companies = company_df.loc[company_df['enterpriseregistrationnumber'] == company_reg]

    # Iterate over linked companies and add them to the graph
    for _, company in linked_companies.iterrows():
	linked_company_reg = company['enterpriseregistrationnumber']
	company_name = company['enterprisename']
	G.add_node(linked_company_reg, name=company_name, level=level)

	# Connect the company node to the director
	G.add_edge(director_name, linked_company_reg)

	# Check if the current level is within the maximum levels
	if level < max_levels:
 	 # Find directors linked to the current company
	 linked_directors = director_df.loc[director_df['enterpriseregistrationnumber'] == linked_company_reg]

	 # Iterate over linked directors and add them to the graph
	 for _, director_row in linked_directors.iterrows():
	 sub_director_name = director_row['full_names']
	 G.add_node(sub_director_name, level=level+1)

	 # Connect the director to the corresponding company node
	 G.add_edge(linked_company_reg, sub_director_name)

	 # Check if the current company and director pair has been visited before making the recursive call
	 if (linked_company_reg, sub_director_name) not in visited:
	 explore_linked_companies(G, linked_company_reg, sub_director_name, company_df, director_df, max_levels, level=level+1, visited=visited)

	 visited.add((linked_company_reg, sub_director_name))
	 
	 # Example usage
	 input_company_reg = '1977/003711/07'  # Replace with the desired company registration
	 max_levels = 5  # Maximum levels of linked companies to explore
	 hierarchy_graph = build_company_hierarchy(input_company_reg, max_levels)
	 
	 # Update the 'level' attribute in the JSON data\ndata = json_graph.node_link_data(hierarchy_graph)
	 
	 # Define a function to print the company hierarchy\ndef print_hierarchy(node, prefix=\"\"):
	 node_data = hierarchy_graph.nodes[node]\n    node_name = node_data['name']
	 print(prefix + node_name)
	 children = list(hierarchy_graph.successors(node))
	 for i, child in enumerate(children):
	 if i == len(children) - 1:
	 print_hierarchy(child, prefix + \"└─ \")
	 else:
	 print_hierarchy(child, prefix + \"├─ \")
	 # Print the company hierarchy starting from the root company
	 root_company_name = hierarchy_graph.nodes[input_company_reg]['name']
	 print_hierarchy(root_company_name)
	
	based on provided code, is the  print_hierarchy function called correctly?